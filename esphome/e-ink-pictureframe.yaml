esphome:
  name: e-ink-pictureframe
  friendly_name: E-Ink Pictureframe

  includes:
    - functions/e-ink-helpers.h

  # on_loop:
  #   then:
  #     - lambda: |-
  #         ESP_LOGD("DEBUG", "Looping");

esp32:
  board: firebeetle32

# Enable logging
logger:
  # level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret enc_default

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true # test this to save some power

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "E-Ink-Infostation"
    password: !secret wifi_ap_password

globals:
  - id: BATT_EMPTY_VOLT
    type: float
    restore_value: True
    initial_value: "3"

  - id: BATT_MAX_VOLT
    type: float
    restore_value: True
    initial_value: "4.0"

output:
  - platform: gpio
    id: displayPrwPin
    pin: GPIO4
    inverted: True
  - platform: gpio
    id: builtInLEDPin
    pin: GPIO2
    inverted: True

deep_sleep:
  id: deepSleepComponent
  run_duration: 120s # this is the max awake time, proper sleep is inplemented in actions
  sleep_duration: 30min

script:
  - id: scriptConsiderSleep
    mode: queued
    then:
      - if:
          condition:
            binary_sensor.is_on: noSleepMode
          then:
            - logger.log: 'Consider Going to sleep: avoided by "prevent_deep_sleep"'
          else:
            - logger.log: "Consider Going to sleep, ...sleeping in a second"
            # set dynamic sleep duration
            - lambda: |-
                auto time = id(esptime).now();
                int hour = time.hour;
                if ((hour >= 23) || (hour < 7)) {
                  // Night time: sleep 60 minutes
                  ESP_LOGD("sleep", "Nighttime detected (%02d:%02d) -> sleeping 60 minutes", hour, time.minute);
                  id(deepSleepComponent).set_sleep_duration(60 * 60 * 1000);
                } else {
                  // Day time: sleep 30 minutes
                  ESP_LOGD("sleep", "Daytime detected (%02d:%02d) -> sleeping 30 minutes", hour, time.minute);
                  id(deepSleepComponent).set_sleep_duration(30 * 60 * 1000);
                }
            - delay: 5s
            - deep_sleep.enter: deepSleepComponent

i2c:
  scan: true
  id: bus_a
  sda: GPIO21
  scl: GPIO22

spi:
  - id: spiBus0
    clk_pin: GPIO18 # SCK # when to read data
    mosi_pin: GPIO19 # aka SDO (serial data out - send data)
    # miso_pin: # aka SDI (serial data in - receive data)

binary_sensor:
  # avoids sleep of esp for updates and dev
  - platform: homeassistant
    id: noSleepMode
    entity_id: input_boolean.esp_no_sleep
    internal: true
    # on_state:
    # then:
    #   - deep_sleep.prevent: deepSleepComponent
    #   - deep_sleep.allow: deepSleepComponent

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "Uptime"
    update_interval: 1s
    icon: mdi:clock-outline
    filters:
      - heartbeat: 2s

  - platform: adc
    id: batteryVoltageSensor
    pin: 34
    attenuation: 12db
    name: "Battery Voltage"
    device_class: voltage
    update_interval: 100ms
    filters:
      - multiply: 2
      - median:
          window_size: 5
          send_every: 25
          send_first_at: 10

  - platform: template
    name: "Battery Level"
    id: batteryLevel
    device_class: battery
    # filters:
    lambda: |-
      return ((id(batteryVoltageSensor).state) - id(BATT_EMPTY_VOLT)) / (id(BATT_MAX_VOLT) - id(BATT_EMPTY_VOLT)) * 100;
    unit_of_measurement: "%"
    update_interval: 2s

    # plant sensors
  - platform: homeassistant
    id: plant0060
    entity_id: sensor.plant_sensor_0060_moisture
    internal: true
  - platform: homeassistant
    id: plant0815
    entity_id: sensor.plant_sensor_0815_moisture
    internal: true
  - platform: homeassistant
    id: plant6c13
    entity_id: sensor.plant_sensor_6c13_moisture
    internal: true
  - platform: homeassistant
    id: plant6c26
    entity_id: sensor.plant_sensor_6c26_moisture
    internal: true
  - platform: homeassistant
    id: plant6c37
    entity_id: sensor.plant_sensor_6c37_moisture
    internal: true

    # climate sensors
  - platform: homeassistant
    id: humidBedroom
    entity_id: sensor.multisensor_1_humidity_24
    internal: true
  - platform: homeassistant
    id: tempBedroom
    entity_id: sensor.multisensor_1_temperature_23
    internal: true
  - platform: homeassistant
    id: tempBathroom
    entity_id: sensor.plant_sensor_6c26_temperature
    internal: true
  - platform: homeassistant
    id: tempBalcony
    entity_id: sensor.plant_sensor_0815_temperature
    internal: true

    # weather infos
  - platform: homeassistant
    id: tempToday
    entity_id: sensor.esphome_forecast_weather
    attribute: temperature
    internal: true
    force_update: True
    filters:
      - lambda: return round(x);
    # main temp sensor used for screen and sleep update event
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "Main value temp sensor (%.1f) updated updating --> screen....", x);
        - component.update: displayComponent
        - script.execute: scriptConsiderSleep
  - platform: homeassistant
    id: tempCurrent
    entity_id: weather.jan_home
    attribute: temperature
    internal: true
  - platform: homeassistant
    id: rainProbabToday
    entity_id: sensor.esphome_forecast_weather
    attribute: precipitation_probability
    internal: true
    filters:
      - lambda: return round(x);
  - platform: homeassistant
    id: tempDay1
    entity_id: sensor.esphome_forecast_weather
    attribute: day_1_temperature
    internal: true
    filters:
      - lambda: return round(x);
  - platform: homeassistant
    id: rainProbabDay1
    entity_id: sensor.esphome_forecast_weather
    attribute: day_1_precipitation_probability
    internal: true
    filters:
      - lambda: return round(x);
  - platform: homeassistant
    id: tempDay2
    entity_id: sensor.esphome_forecast_weather
    attribute: day_2_temperature
    internal: true
    filters:
      - lambda: return round(x);
  - platform: homeassistant
    id: rainProbabDay2
    entity_id: sensor.esphome_forecast_weather
    attribute: day_2_precipitation_probability
    internal: true
    filters:
      - lambda: return round(x);

    # local esp sensor
  - platform: bme280_i2c
    i2c_id: bus_a
    address: 0x76
    update_interval: 2s
    temperature:
      name: "Temperature"
      id: internalTemp
      accuracy_decimals: 1
    pressure:
      name: "Pressure"
      accuracy_decimals: 1
    humidity:
      name: "Humidity"
      id: internalHumidity
      accuracy_decimals: 1

text_sensor:
  - platform: homeassistant
    id: weatherCondition
    entity_id: sensor.esphome_forecast_weather
    attribute: condition
    internal: true
    filters:
  - platform: homeassistant
    id: weatherConditionDay1
    entity_id: sensor.esphome_forecast_weather
    attribute: day_1_condition
    internal: true
  - platform: homeassistant
    id: weatherConditionDay2
    entity_id: sensor.esphome_forecast_weather
    attribute: day_2_condition
    internal: true

  # sunset and sunrise
  - platform: homeassistant
    id: nextSunSetString
    entity_id: sensor.esphome_next_sunset_as_string
    internal: true
  - platform: homeassistant
    id: nextSunRiseString
    entity_id: sensor.esphome_next_sunrise_as_string
    internal: true

font:
  # gfonts://family[@weight]
  - file: "fonts/Micro-Six_8px.ttf"
    id: microSix
    size: 8
  - file: "fonts/VCR_OSD_MONO_1.001_21px.ttf"
    id: vcrMonoFont
    size: 21
  - file: "fonts/roundedsquare_22.ttf"
    id: roundedFont
    size: 22
  - file: "gfonts://Roboto@700"
    id: robotoFontSmall
    size: 20
  - file: "gfonts://Roboto@700"
    id: robotoFontMed
    size: 27
  - file: "gfonts://Roboto@700"
    id: robotoFontLarge
    size: 40
    glyphs: '>›!"%()+=,-_.:°/?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'

image:
  # colored multicolor image
  # - file: "images/cherry-blossom.png"
  #   id: imgDecoration
  #   resize: 240x240
  #   type: RGB565
  #   dither: FLOYDSTEINBERG
  - file: "images/cherry-blossom-red.png"
    id: imgDecorationRedMask
    type: BINARY
    transparency: chroma_key
    resize: 300x300
  - file: "images/cherry-blossom-black.png"
    id: imgDecorationBlackMask
    type: BINARY
    transparency: chroma_key
    resize: 300x300

  # icons for values
  - file: mdi:solar-panel-large
    id: icnSolarPanelXL
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:water-thermometer-outline
    id: icnThermostatXL
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-sunset-down
    id: icnSunSet
    resize: 25x25
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-sunset-up
    id: icnSunRise
    resize: 25x25
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-pouring
    id: icnRainProbability
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:water-percent
    id: icnHumidity
    resize: 30x30
    type: BINARY
    transparency: chroma_key

  # forecast images large
  - file: mdi:weather-sunny
    id: icnSunnyXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-night
    id: icnClearNightXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-cloudy
    id: icnCloudyXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-rainy
    id: icnRainyXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-snowy-rainy
    id: icnSleetXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-snowy
    id: icnSnowXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-windy
    id: icnWindXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-fog
    id: icnFogXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key
  - file: mdi:weather-partly-cloudy
    id: icnPartlyCloudyXL
    resize: 200x200
    type: BINARY
    transparency: chroma_key

  # forecast images small
  - file: mdi:weather-sunny
    id: icnSunnyMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-night
    id: icnClearNightMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-cloudy
    id: icnCloudyMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-rainy
    id: icnRainyMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-snowy-rainy
    id: icnSleetMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-snowy
    id: icnSnowMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-windy
    id: icnWindMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-fog
    id: icnFogMD
    resize: 80x80
    type: BINARY
  - file: mdi:weather-partly-cloudy
    id: icnPartlyCloudyMD
    resize: 80x80
    type: BINARY

    # plants
  - file: mdi:cactus
    id: icnCactus
    resize: 30x30
    type: BINARY
  - file: mdi:fruit-pineapple
    id: icnPineapple
    resize: 30x30
    type: BINARY
  - file: mdi:tree-outline
    id: icnTree
    resize: 30x30
    type: BINARY
  - file: mdi:sprout-outline
    id: icnSprout
    resize: 30x30
    type: BINARY
  - file: mdi:flower-tulip-outline
    id: icnFlower
    resize: 30x30
    type: BINARY

time:
  - platform: homeassistant
    id: esptime

display:
  - platform: waveshare_epaper
    id: displayComponent
    # model: 7.50in-bV3
    model: 7.50in-bV3-bwr
    # model: 7.50in-bv2
    #pins
    busy_pin:
      number: GPIO25
      inverted: true
    reset_pin: GPIO1
    cs_pin: GPIO23 # chip select (SS) # when to listen for data
    dc_pin: GPIO3 # ?
    spi_id: spiBus0

    update_interval: never # is done by state changes
    reset_duration: 2ms
    rotation: 270
    auto_clear_enabled: true
    lambda: |-
      //display is 800x480
      int sX = 0;
      int sY = 25;
      int w = it.get_width() - sX;
      int h = it.get_height() - 25 - sY;
      int divMargin = 25;
      const auto RED = Color(255, 0,   0,   0);

      // it.print(100, 100, id(robotoFontMed), "Hello World");

      // for layout debugging
      layoutLines(it, sX, sY, w, h);
      // // data for debugging
      it.strftime(sX + 0, sY + 742, id(microSix), "%Y.%m:%d %H:%M", id(esptime).now());
      it.printf(sX + 100, sY + 742, id(microSix), "%.0f %%", id(batteryLevel).state);
      it.printf(sX + 130, sY + 742, id(microSix), "%.2f V", id(batteryVoltageSensor).state);
      // it.printf(sX + 0, sY + 742 - 9, id(microSix), "%.0f iaq", id(internalAirQuality).state);
      // it.printf(sX + 50, sY + 742 - 9, id(microSix), "%s", id(internalIAQAccuracy).state.c_str());

      // decoration image
      int imgX = 0;
      int imgY = it.get_height();
      it.image(imgX, imgY, imgDecorationRedMask, ImageAlign::BOTTOM_LEFT, Color(255, 0,   0,   0));
      it.image(imgX, imgY, imgDecorationBlackMask, ImageAlign::BOTTOM_LEFT);

      // weather forecast today
      forecast(sX + 35, sY, forecastIcon(id(weatherCondition).state, true), 
              id(icnRainProbability), tempToday, rainProbabToday, it, id(robotoFontLarge), tempCurrent);
      // weather forecast tomorrow
      forecast(sX + 325, sY, forecastIcon(id(weatherConditionDay1).state, false), 
              id(icnRainProbability), tempDay1, rainProbabDay1, it, id(robotoFontMed), NULL);
      // weather forecast day after tomorrow
      forecast(sX + 325, sY + 155, forecastIcon(id(weatherConditionDay2).state, false), 
              id(icnRainProbability), tempDay2, rainProbabDay2, it, id(robotoFontMed), NULL);

      // sunrise
      sunSetRise(sX + 15, sY + 285, id(icnSunRise), id(nextSunRiseString), it, id(robotoFontSmall));
      // sunset
      sunSetRise(sX + 170, sY + 285, id(icnSunSet), id(nextSunSetString), it, id(robotoFontSmall));

      int qH = 225, qY = sY + 330;   // height of whole grid, startY of grid
      int q1X = sX;             // grid col 1 start x 
      int q2X = (q1X + w) / 2;  // grid col 2 start x 
      int q1Y = qY;       // grid row 1 start y 
      int q2Y = qY + qH / 2;   // grid row 2 start y 
      // horizontal
      it.line(q1X + 10, q2Y, sX + w - 10, q2Y, RED);
      // vertical
      it.line(q2X, q1Y + 5, q2X, q1Y + qH - 5, RED);

      // temps rooms
      roomInfo(q1X + 10, q1Y, "Wohnzimmer", 
              NULL, NULL, id(internalTemp), id(internalHumidity), NULL,
              id(icnHumidity), it, id(roundedFont), id(robotoFontMed));
      roomInfo(q2X + 10, q1Y, "Balkon", id(tempBalcony), NULL, NULL, NULL, NULL,
              id(icnHumidity), it, id(roundedFont), id(robotoFontMed));
      roomInfo(q1X + 10, q2Y + 10, "Bad",
              id(tempBathroom), NULL, NULL, NULL, NULL,
              id(icnHumidity), it, id(roundedFont), id(robotoFontMed));
      roomInfo(q2X + 10, q2Y + 10, "Schlafzimmer",
              id(tempBedroom), id(humidBedroom), NULL, NULL, NULL,
              id(icnHumidity), it, id(roundedFont), id(robotoFontMed));

      // plants
      plant(sX + 240, sY + 590, 
          id(plant0060).has_state() ? id(plant0060).state : -1, 
          id(icnCactus), it, id(vcrMonoFont));
      plant(sX + 290, sY + 590, 
          id(plant0815).has_state() ? id(plant0815).state : -1, 
          id(icnSprout), it, id(vcrMonoFont));
      plant(sX + 340, sY + 590, 
          id(plant6c13).has_state() ? id(plant6c13).state : -1, 
          id(icnPineapple), it, id(vcrMonoFont));
      plant(sX + 390, sY + 590, 
          id(plant6c26).has_state() ? id(plant6c26).state : -1, 
          id(icnTree), it, id(vcrMonoFont));
      plant(sX + 440, sY + 590, 
          id(plant6c37).has_state() ? id(plant6c37).state : -1, 
          id(icnFlower), it, id(vcrMonoFont));

captive_portal:
