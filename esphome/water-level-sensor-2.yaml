esphome:
  name: water-level-sensor-2
  friendly_name: Water Level Sensor 2

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

number:
  - platform: template
    name: "Sensor Offset"
    id: sensorOffset
    optimistic: true
    unit_of_measurement: m
    initial_value: 0.00
    min_value: -1.0
    max_value: 1.0
    step: 0.01
    restore_value: true
    mode: BOX

  - platform: template
    name: "Barrel Height"
    id: barrelHeight
    optimistic: true
    unit_of_measurement: m
    initial_value: 0.00
    min_value: 0.25 # minimum distance is 25cm
    max_value: 6.0
    step: 0.01
    restore_value: true
    mode: BOX

# output:
#   - platform: gpio
#     pin: GPIO15 # Adjust if your board uses a different pin
#     id: onboard_led
#     inverted: True

uart:
  tx_pin: GPIO14
  rx_pin: GPIO12
  baud_rate: 9600

switch:
  - platform: restart
    name: "Restart Device"

  - platform: gpio
    pin: GPIO15 # Adjust if your board uses a different pin
    name: "LED"
    id: onboard_led
    inverted: False
    restore_mode: RESTORE_DEFAULT_ON

sensor:
  # dieser Sensor ist in Mode 1 => Messungen selbstÃ¤ndig alle 100ms
  - platform: "jsn_sr04t"
    id: sensorDistanceRaw
    name: "Sensor Distance Real"
    icon: "mdi:arrow-expand-vertical"
    device_class: distance
    # update_interval: 100ms
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 7
          send_every: 50 # send every X value -> so update to value = update_interval * send_every
    on_value:
      then:
        # manuelle Aktualisierung garantiert berechnete Werte zum selben Zeitpunkt wie Quellwerte
        - component.update: sensorDistance
        - component.update: fillLevelPercent
        - component.update: waterLevel

  - platform: template
    id: sensorDistance
    name: "Distance"
    icon: "mdi:arrow-expand-vertical"
    unit_of_measurement: m
    accuracy_decimals: 2
    device_class: distance
    update_interval: never
    lambda: |-
      return id(sensorDistanceRaw).state - id(sensorOffset).state;

  - platform: template
    id: fillLevelPercent
    name: "Fill Status Percent"
    icon: "mdi:water-percent"
    device_class: water
    unit_of_measurement: "%"
    accuracy_decimals: 2
    update_interval: never
    lambda: |-
      float height = id(barrelHeight).state;
      float offset = id(sensorOffset).state;
      float distance = id(sensorDistanceRaw).state - offset;

      // Prevent division by zero
      if (height <= 0.0) {
        return 0.0;
      }

      // Calculate water depth
      float water_depth = height - distance;

      // Clamp value between 0 and height
      if (water_depth < 0.0) {
        water_depth = 0.0;
      } else if (water_depth > height) {
        water_depth = height;
      }

      return (water_depth / height) * 100.0;

  - platform: template
    id: waterLevel
    name: "Water Level"
    icon: "mdi:waves-arrow-up"
    unit_of_measurement: m
    device_class: distance
    accuracy_decimals: 2
    update_interval: never
    lambda: |-
      float height = id(barrelHeight).state;
      float offset = id(sensorOffset).state;
      float distance = id(sensorDistanceRaw).state - offset;

      // Prevent division by zero
      if (height <= 0.0) {
        return 0.0;
      }

      // Calculate water depth
      return height - distance;

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    icon: mdi:clock-outline
    filters:
      - heartbeat: 2s

  - platform: internal_temperature
    update_interval: 60s
    accuracy_decimals: 0
    name: "Internal Chip Temperature"

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "m8Tey5XLfEhAwbLZV/sqbR+2cO1YvryFUaimwU7JXxg="

ota:
  - platform: esphome
    password: "933d60a1e248b3a72c66720ea48548b2"

wifi:
  networks:
    - ssid: zuhause
      password: !secret wifi_password_zuhause
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Water-Level-Sensor-2"
    password: !secret wifi_ap_password

captive_portal:
