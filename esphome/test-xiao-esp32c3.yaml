esphome:
  name: test-xiao-esp32c3
  friendly_name: test xiao esp32c3
  on_boot: 
    then:
      - logger.log: "on boot triggered"
      - lambda: |-
          id(globalCounter) += 1;
  on_shutdown:
    then:
      - logger.log: "on shutdown triggered"
      - globals.set: 
          id: globalGoingToSleep
          value: 'true'
      - component.update: displayOled
          

globals:
  - id: globalGoingToSleep
    type: boolean
    restore_value: no
    initial_value: 'false'
  - id: globalCounter
    type: int
    restore_value: yes
    initial_value: '0'
    
esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret enc_default

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test-Xiao-Esp32C3"
    password: !secret wifi_ap_password

web_server:
  port: 80 # Or your preferred port
  
deep_sleep:
  run_duration: 30s
  sleep_duration: 1h
  # # touch_wakeup: true
  wakeup_pin: GPIO2
  wakeup_pin_mode: INVERT_WAKEUP
    
binary_sensor:
  - platform: gpio
    id: sensorButton
    pin:
      number: GPIO3
      mode: 
        input: True
        pulldown: True
      inverted: False
    name: "Button"
    filters:
      delayed_on_off: 100ms # Debouncing
    on_click: 
      then:
        - lambda: |-
            id(globalCounter) += 1;
            

font:
  # gfonts://family[@weight]
  - file: "fonts/Micro-Six_8px.ttf"
    id: microSix
    size: 8
  - file: "fonts/VCR_OSD_MONO_1.001_21px.ttf"
    id: vcrMonoFont
    size: 21
  - file: "fonts/VCRosdNEUE_16px.ttf"
    id: fontMed
    size: 16
    
    
i2c:
  sda: GPIO6
  scl: GPIO7
  scan: True

display:
  - platform: ssd1306_i2c
    id: displayOled
    model: "SSD1306 128x32"
    address: 0x3C
    update_interval: 500ms
    lambda: |-
      if (id(globalGoingToSleep) == true) {
        it.fill(COLOR_OFF);
        return;
      }

      it.printf(0, 0, id(fontMed), "%.0f Â°C", id(sensorTemp).state);
      it.printf(60, 0, id(fontMed), "%.0f hPa", id(sensorPressure).state);
      it.printf(0, 18, id(fontMed), "%.0f %%", id(sensorHumid).state);
      it.printf(60, 18, id(fontMed), "%.0f kO", id(sensorGas).has_state() ? id(sensorGas).state / 1000 : 0L);
      if (id(sensorButton).state == true) {
        it.rectangle(0, 0, 128, 32);
      }
      it.printf(112, 18, id(fontMed), "%d", id(globalCounter));

# Example configuration entry
sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    icon: mdi:clock-outline
    filters:
      - heartbeat: 2s
  - platform: bme680
    temperature:
      id: sensorTemp
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      id: sensorPressure
      name: "BME680 Pressure"
    humidity:
      id: sensorHumid
      name: "BME680 Humidity"
    gas_resistance:
      id: sensorGas
      name: "BME680 Gas Resistance"
    address: 0x77
    update_interval: 500ms

captive_portal: