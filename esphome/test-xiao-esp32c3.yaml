esphome:
  name: test-xiao-esp32c3
  friendly_name: test xiao esp32c3
  on_boot:
    then:
      - logger.log: "on boot triggered"
      - lambda: |-
          id(globalCounter) += 1;
  on_shutdown:
    then:
      - logger.log: "on shutdown triggered"
      - globals.set:
          id: globalGoingToSleep
          value: "true"
      - component.update: displayOled

globals:
  - id: globalGoingToSleep
    type: boolean
    restore_value: no
    initial_value: "false"
  - id: buttonSignaledSleep
    type: boolean
    restore_value: no
    initial_value: "false"
  - id: buttonPressTimer
    type: int
    restore_value: no
    initial_value: "0"
  - id: globalCounter
    type: int
    restore_value: yes
    initial_value: "0"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret enc_default

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: idWifi

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test-Xiao-Esp32C3"
    password: !secret wifi_ap_password

web_server:
  port: 80 # Or your preferred port

deep_sleep:
  id: idDeepSpleep
  run_duration: 10min
  # sleep_duration: 1h
  wakeup_pin: GPIO2
  wakeup_pin_mode: INVERT_WAKEUP

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: True
  frequency: 300kHz

bme68x_bsec2_i2c:
  address: 0x77
  model: bme680
  # operating_age: 28d
  # sample_rate: LP
  supply_voltage: 3.3V
  temperature_offset: 3.9
  state_save_interval: 5min

binary_sensor:
  - platform: gpio
    id: sensorButton
    pin:
      number: GPIO3
      mode:
        input: True
        pulldown: True
      inverted: False
    name: "Button"

    on_click:
      - min_length: 2s
        max_length: 5s
        then:
          - logger.log: "Button pressed for 2 seconds, going to sleep..."
          - deep_sleep.enter: idDeepSpleep

      # just for debugging, count all presses
      - then:
          - lambda: |-
              id(globalCounter) += 1;

    on_double_click:
      # change display page
      - then:
          - display.page.show_next: displayOled

    on_press:
      - then:
          # store press start time
          - lambda: |-
              id(buttonPressTimer) = millis();

    on_release:
      - then:
          # reset sleep signal button state
          - lambda: |-
              id(buttonSignaledSleep) = false;

interval:
  # update loop to show button press time
  - interval: 100ms
    then:
      - lambda: |-
          if (id(sensorButton).state 
              && (millis() - id(buttonPressTimer) >= 2000) 
              && (millis() - id(buttonPressTimer) < 5000)) {
            id(buttonSignaledSleep) = true;
          } else {
            id(buttonSignaledSleep) = false;
          }

# Example configuration entry
sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    icon: mdi:clock-outline
    filters:
      - heartbeat: 2s

  - platform: bme68x_bsec2
    temperature:
      id: sensorTemp
      name: "BME680 Temperature"
    pressure:
      id: sensorPressure
      name: "BME680 Pressure"
    humidity:
      id: sensorHumid
      name: "BME680 Humidity"
    iaq:
      id: sensorIaq
      name: "BME680 IAQ"
    iaq_static:
      id: sensorStaticGas
      name: "BME680 IAQ Static"
    co2_equivalent:
      id: sensorCo2
      name: "BME680 CO2"
    breath_voc_equivalent:
      id: sensorVoc
      name: "BME680 Breath VOC"

text_sensor:
  - platform: bme68x_bsec2
    iaq_accuracy:
      id: sensorIaqAccuracy
      name: "BME68x IAQ Accuracy"

font:
  # gfonts://family[@weight]
  - file: "fonts/Micro-Six_8px.ttf"
    id: microSix
    size: 8
  - file: "fonts/VCR_OSD_MONO_1.001_21px.ttf"
    id: vcrMonoFont
    size: 21
  - file: "fonts/VCRosdNEUE_16px.ttf"
    id: fontMed
    size: 16

display:
  - platform: ssd1306_i2c
    id: displayOled
    model: "SSD1306 128x32"
    # contrast: 10%
    address: 0x3C
    update_interval: 250ms
    pages:
      # home page
      - lambda: |-
          // turn off screen when going to sleep
          if (id(globalGoingToSleep) == true) {
            it.fill(COLOR_OFF);
            return;
          }

          // show sleep press mode
          if (id(buttonSignaledSleep) == true) {
            it.print(63, 15, id(vcrMonoFont), TextAlign::CENTER, "Sleep...");
            return;
          }

          // print temps
          it.print(0, 0, id(microSix), "Environment");
          it.printf(127, 0, id(fontMed), TextAlign::TOP_RIGHT, "%.1f Â°C", id(sensorTemp).state);
          it.printf(0, 32, id(microSix), TextAlign::BOTTOM_LEFT, "LD: %.0f hPa", id(sensorPressure).state);
          it.printf(127, 32, id(microSix), TextAlign::BOTTOM_RIGHT, "Hmd: %.1f %%", id(sensorHumid).state);

      # air quality page
      - lambda: |-
          // turn off screen when going to sleep
          if (id(globalGoingToSleep) == true) {
            it.fill(COLOR_OFF);
            return;
          }

          // show sleep press mode
          if (id(buttonSignaledSleep) == true) {
            it.print(63, 15, id(vcrMonoFont), TextAlign::CENTER, "Sleep...");
            return;
          }

          // print everything related to air quality
          it.print(0, 0, id(microSix), "Airquality");
          it.printf(0, 32, id(microSix), TextAlign::BOTTOM_LEFT, "Acc: %s", id(sensorIaqAccuracy).state.c_str());
          it.printf(127, 0, id(fontMed), TextAlign::TOP_RIGHT, "%.0f IAQ", id(sensorIaq).has_state() ? id(sensorIaq).state / 1000 : 0L);

      # debug page
      - lambda: |-
          // turn off screen when going to sleep
          if (id(globalGoingToSleep) == true) {
            it.fill(COLOR_OFF);
            return;
          }

          // show sleep press mode
          if (id(buttonSignaledSleep) == true) {
            it.rectangle(0, 0, 128, 32);
          }

          // print global press counter
          it.print(0, 0, id(microSix), "Debug:");
          it.printf(127, 0, id(microSix), TextAlign::TOP_RIGHT, "glCnt: %d", id(globalCounter));
          it.printf(127, 16, id(microSix), TextAlign::CENTER_RIGHT, "button: %s", id(sensorButton).state == true ? "pressed" : "not pressed");
          it.printf(127, 32, id(microSix), TextAlign::BOTTOM_RIGHT, id(idWifi).is_connected() ? "wifi connected" : "wifi disconnected");
captive_portal:
